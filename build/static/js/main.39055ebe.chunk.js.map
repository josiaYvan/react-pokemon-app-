{"version":3,"sources":["helpers/formadate.ts","helpers/formatType.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/pageNotFound.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentification-service.ts","pages/login.tsx","components/PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","BorderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","borderColor","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypesValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","marginBottom","checked","concat","currentType","selectType","disabled","PokemonEdit","Pokemon","PokemonAdd","React","getTime","AuthentificationService","username","password","isAuthentificated","setTimeout","Login","message","setMessage","AuthenticationService","login","isAuthenticated","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.39055ebe.chunk.js","sourcesContent":["// formatage de date//hook personnaliser\nconst formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n}\n export default formatDate;\n\n// passer en params un donnee de type sinon si y pas donc passant un new date \n// celui ci est pour le db.json sans createDate.","// formater la couleur selon le type\nconst formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n  }\n\n  export default formatType;","import React, {FunctionComponent, useState} from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/formadate';\nimport formatType from '../helpers/formatType';\nimport { useHistory } from 'react-router-dom';\n\ntype Props = {\n  pokemon: Pokemon;\n  BorderColor?: string;\n}\n\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, BorderColor = '#009688'}) => {\n  \n   //gestion couleur \n  const [color, setColor] = useState<string>();\n  // hooks de navigation ou recuperation d'objet\n  const history = useHistory();\n    \n  const showBorder = () => {\n    setColor(BorderColor)\n  }\n\n  const hideBorder = () => {\n    setColor('#f5f5f5'); //on remet la bordure en gris\n  }\n    //gestionnaire d'evenement Pour les details a chaque click\n    const goToPokemon = (id: number) => {\n      history.push(`/pokemons/${id}`)\n    }\n\n  return (\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n        <div className=\"card horizontal\" style={{borderColor: color }}>\n          <div className=\"card-image\"> \n            <img src={pokemon.picture} alt={pokemon.name}/>\n          </div>\n          <div className=\"card-stacked\">\n            <div className=\"card-content\">\n              <p>{pokemon.name}</p>\n              <p><small> {formatDate(pokemon.created)} </small></p>\n              {pokemon.types.map(type => (\n                <span key={type} className={formatType(type)} >{type}</span>\n              ) )}\n            </div>\n          </div>\n        </div> \n      </div>\n    );\n};\n\nexport default PokemonCard;","import Pokemon from './pokemon';\n   \nexport const POKEMONS: Pokemon[] = [\n {\n  id: 1,\n  name: \"Bulbizarre\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n  types: [\"Plante\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 2,\n  name: \"Salamèche\",\n  hp: 28,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n  types: [\"Feu\"],\n  created: new Date()\n },\n {\n  id: 3,\n  name: \"Carapuce\",\n  hp: 21,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n  types: [\"Eau\"],\n  created: new Date()\n },\n {\n  id: 4,\n  name: \"Aspicot\",\n  hp: 16,\n  cp: 2,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n  types: [\"Insecte\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 5,\n  name: \"Roucool\",\n  hp: 30,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 6,\n  name: \"Rattata\",\n  hp: 18,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 7,\n  name: \"Piafabec\",\n  hp: 14,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 8,\n  name: \"Abo\",\n  hp: 16,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n  types: [\"Poison\"],\n  created: new Date()\n },\n {\n  id: 9,\n  name: \"Pikachu\",\n  hp: 21,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n  types: [\"Electrik\"],\n  created: new Date()\n },\n {\n  id: 10,\n  name: \"Sabelette\",\n  hp: 19,\n  cp: 3,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 11,\n  name: \"Mélofée\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n  types: [\"Fée\"],\n  created: new Date()\n },\n {\n  id: 12,\n  name: \"Groupix\",\n  hp: 17,\n  cp: 8,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n  types: [\"Feu\"],\n  created: new Date()\n }\n];\n  \nexport default POKEMONS;","// import Pokemon from \"../models/pokemon\";\n// // CRUD\n\n// export default class PokemonService {\n//   static getPokemons(): Promise<Pokemon[]> {\n//     //recupere les pokemons par une promesse de type pokemon[]\n//     return fetch(\"http://localhost:3001/pokemons\")\n//       .then((response) => response.json())\n//       .catch((error) => this.handleError(error));\n//   }\n\n//   static getPokemon(id: number): Promise<Pokemon | null> {\n//     //recupere un seul pokemon via son id et renvoie un pokemon ou une valeur de type null si l'api n'a pas l'id.\n//     return fetch(`http://localhost:3001/pokemons/${id}`)\n//       .then((response) => response.json())\n//       .then((data) => (this.isEmpty(data) ? null : data))\n//       .catch((error) => this.handleError(error)); //permet de recuperer les erreurs\n//   }\n\n//   static isEmpty(data: Object): boolean {\n//     //pour savoir si on return pokmeon ou null\n//     return Object.keys(data).length === 0; //verifie si la valeur de l'objet retourne un pokemon ou un null\n//   }\n\n//   static handleError(error: Error): void {\n//     console.log(error); //afficher only dans le consol l' erreur\n//   }\n\n//   //save les modification\n//   //put persister pour modifier l'api\n//   static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n//     return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n//       method: \"PUT\", //definir le type de requette\n//       body: JSON.stringify(pokemon), // JSON.stringify(objetParams) : ceci transforme un objet en string en parallele\n//       headers: { \"Content-Type\": \"application/json\" },\n//     }) //entete de la requette, pour preciser qu'il s'agit de donnee au format json\n//       .then((response) => response.json())\n//       .catch((error) => this.handleError(error));\n//   }\n//   static deletePokemon(pokemon: Pokemon): Promise<{}> {\n//     return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n//       method: \"DELETE\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//     })\n//       .then((response) => response.json())\n//       .catch((error) => this.handleError(error));\n//   }\n\n//   //ajout d'un new pokemon\n//   static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n//     delete pokemon.created;\n\n//     return fetch(`http://localhost:3001/pokemons`, {\n//       method: \"POST\",\n//       body: JSON.stringify(pokemon),\n//       headers: { \"Content-Type\": \"application/json\" },\n//     })\n//       .then((response) => response.json())\n//       .catch((error) => this.handleError(error));\n//   }\n\n//   //pour la recherche\n//   static searchPokemon(term: string): Promise<Pokemon[]> {\n//     // fonction retourne un tableau de pokemon\n//     return fetch(`http://localhost:3001/pokemons?q=${term}`)\n//       .then((response) => response.json())\n//       .catch((error) => this.handleError(error));\n//   }\n// }\n// //static means que les methodes ne sont rattachées qu'à elle meme.\nimport Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\";\n  \nexport default class PokemonService {\n  \n  static pokemons:Pokemon[] = POKEMONS; //pour sve l'etat des pokemons\n  \n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development'); //on l'environnement dans laquelle on se trouve\n  \n  static getPokemons(): Promise<Pokemon[]> {\n    if(this.isDev) { //verifie si on est dans l'env de developpement\n      return fetch('http://localhost:3001/pokemons') //on fait appel à l'api ou il envoie la liste des pokemons\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => { //sinon on retourne une promesse similaire à l'api, cad les donneés sont les memes mai la source de donnée est differente\n      resolve(this.pokemons);\n    });\n  }\n  \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`)//l'api return un pokemo avec l'identifiant\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      resolve(this.pokemons.find(pokemon => id === pokemon.id));//retourne le meme pokemon mais mais venant du constant des pokemons\n    }); \n  }\n  \n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {\n      const { id } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    }); \n  }\n  \n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      const { id } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    }); \n  }\n  \n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    pokemon.created = new Date(pokemon.created);\n  \n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    }); \n  }\n  \n  static searchPokemon(term: string): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n  \n  }\n  \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n  \n  static handleError(error: Error): void {\n    console.error(error);\n  }\n}","import React, { FunctionComponent, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\n\nconst PokemonSearch: FunctionComponent = () => {\n  const [term, setTerm] = useState<string>(\"\"); //pour stocker l'etat au terme saisie de l'user\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]); //pour stocker l'etat des resultats concernants au term de recherche\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term);\n\n    if (term.length <= 1) {\n      //n'affiche pas des resultats si le nombre de char saisie est 1\n      setPokemons([]);\n      return;\n    }\n\n    PokemonService.searchPokemon(term).then((pokemons) =>\n      setPokemons(pokemons)\n    );\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s12 m6 offset-m3\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"input-field\">\n              <input\n                type=\"text\"\n                placeholder=\"Rechercher un pokémon\"\n                value={term}\n                onChange={(e) => handleInputChange(e)}\n              />\n            </div>\n            <div className=\"collection\">\n              {/* si l'user appuye sur un pokemon, redirection vers la page detail de ce pokemon */}\n              {pokemons.map((pokemon) => (\n                <Link\n                  key={pokemon.id}\n                  to={`/pokemons/${pokemon.id}`}\n                  className=\"collection-item\"\n                >\n                  {pokemon.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonSearch;\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PokemonCard from \"../components/pokemon-card\";\nimport PokemonSearch from \"../components/pokemon-search\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\n\nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n\n  useEffect(() => {\n    PokemonService.getPokemons().then((pokemons) => setPokemons(pokemons));\n  }, []);\n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <PokemonSearch/>\n          {pokemons.map((pokemon) => (\n            <PokemonCard key={pokemon.id} pokemon={pokemon} />\n            // ce component est le parent de pokemon-card\n          ))}\n          <Link\n            className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n            style={{ position: \"fixed\", bottom: \"25px\", right: \"25px\" }}\n            to={\"/pokemon/add\"}\n          >\n            {\" \"}\n            <i className=\"material-icons\">add</i>{\" \"}\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonList;\n","import React, { FunctionComponent } from 'react';\n  \nconst Loader: FunctionComponent = () => {\n   \n  return (\n    <div className=\"preloader-wrapper big active\"> \n      <div className=\"spinner-layer spinner-blue\"> \n        <div className=\"circle-clipper left\"> \n          <div className=\"circle\"></div> \n        </div>\n        <div className=\"gap-patch\"> \n          <div className=\"circle\"></div> \n        </div><div className=\"circle-clipper right\"> \n          <div className=\"circle\"></div> \n        </div>\n      </div> \n   </div> \n  );\n}\n   \nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport formatDate from \"../helpers/formadate\";\nimport formatType from \"../helpers/formatType\";\nimport PokemonService from \"../services/pokemon-service\";\nimport Loader from \"../components/loader\";\n\n//pour recuperer les identifiants venant de l' url\ntype Params = { id: string };\n\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({\n  match,\n}) => {\n  // save l' etat du pokemon selectionné dans pokemon\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\n\n  //   lance boucle pour chercher l'id du pokemon qui correpond dans l'url\n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then((pokemon) =>\n      setPokemon(pokemon)\n    );\n    // cet useEffect agit si il y a changement au niveau de l'url(observable)\n  }, [match.params.id]);\n\n  return (\n    <div>\n      {pokemon ? ( //operateur ternaire s' il y a pokemon donc affiche\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\">\n            <h2 className=\"header center\">{pokemon.name}</h2>\n            <div className=\"card hoverable\">\n              <div className=\"card-image\">\n                <img\n                  src={pokemon.picture}\n                  alt={pokemon.name}\n                  style={{ width: \"250px\", margin: \"0 auto\" }}\n                />\n                {/* // */}\n                <Link\n                  to={`/pokemons/edit/${pokemon.id}`}\n                  className=\"btn btn-floating halfway-fab waves-effect waves-light\"\n                >\n                  <i className=\"material-icons\">edit</i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr>\n                        <td>Nom</td>\n                        <td>\n                          <strong>{pokemon.name}</strong>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Points de vie</td>\n                        <td>\n                          <strong>{pokemon.hp}</strong>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Dégâts</td>\n                        <td>\n                          <strong>{pokemon.cp}</strong>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Types</td>\n                        <td>\n                          {pokemon.types.map((type) => (\n                            <span key={type} className={formatType(type)}>\n                              {type}\n                            </span>\n                          ))}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Date de création</td>\n                        <td>{formatDate(pokemon.created)}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  {/* appel de link */}\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        //   sinon du ternaire\n        <h4 className=\"center\">\n          {\" \"}\n          <Loader />{\" \"}\n        </h4>\n      )}\n    </div>\n  );\n};\n\nexport default PokemonsDetail;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport formatType from \"../helpers/formatType\";\nimport { useHistory } from \"react-router-dom\";\nimport PokemonService from \"../services/pokemon-service\";\n\n// propos du composant\ntype Props = {\n  pokemon: Pokemon;\n  isEditForm: boolean;\n};\n// pour modeliser les champs dans les formulaires\n//si le champ saisie present des valeurs, erreurs, valide\ntype Field = {\n  value?: any;\n  error?: string;\n  isValid?: boolean;\n};\n// liste de champs de f ormulaire\ntype Form = {\n  picture: Field;\n  name: Field;\n  hp: Field;\n  cp: Field;\n  types: Field;\n};\n\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon, isEditForm }) => {\n  //historique de page\n  const history = useHistory();\n\n  //   state des champs du formulaire\n  const [form, setForm] = useState<Form>({\n    picture: { value: pokemon.picture },\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true },\n  });\n\n  // methode pour preremplir (cocher) le type de pokemon\n  const hasType = (type: string): boolean => {\n    return form.types.value.includes(type);\n  };\n  //liaison des formulaires au state\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    //fusion de 2 objets propriete de droite ecrase le gauche\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    // copie de l' ancien avec la modification apporter par l'use sur le hcamp concerner\n    setForm({ ...form, ...newField });\n  };\n  // pour save la modification des types de pokemon\n  const selectType = (\n    type: string,\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if (checked) {\n      //si l' utilisateur coche un type, à l' ajoute a la liste de pokemon.\n      const newType: string[] = form.types.value.concat([type]);\n      newField = { value: newType };\n    } else {\n      //si l' user decoche un type, on le retire de la liste des types de pokemon\n      const newType: string[] = form.types.value.filter(\n        (currentType: string) => currentType !== type\n      );\n      newField = { value: newType };\n    }\n\n    setForm({ ...form, ...{ types: newField } });\n  };\n\n  //methode pour gerer la soumission du formulaire\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); //bloque le comportement natif du formulaire pour le gerer nous meme\n    //recupere le resultat de la validation des champs\n    const isFormValid = validateForm();\n    //redirection si only formulaire valide\n    if (isFormValid) {\n      //prise en compte de l'ajout d'image de pokemon\n      pokemon.picture = form.picture.value;\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      // save les modifications puis redirige l' user vers la page detail du pokemon\n\n      //appel du formulaire selon isEditPokemon\n      //si true on appel updatePokemon\n      isEditForm ? updatePokemon() : addPokemon();\n    }\n  };\n\n  //ajout de methode pour l'ajout\n  const addPokemon = () => {\n    PokemonService.addPokemon(pokemon).then(() =>\n      history.push(`/pokemons/`)\n    );\n  };\n\n  const updatePokemon = () => {\n    PokemonService.updatePokemon(pokemon).then(() =>\n      history.push(`/pokemons/${pokemon.id}`)\n    );\n  };\n\n  //pour la supression de pokemon\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  };\n\n  //n' afficher l'image que si ajout\n  const isAddForm = () => {\n    return !isEditForm;\n  };\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    //validator url\n    if (isAddForm()) {\n      //regle de validation de formulaire\n      const start =\n        \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n      const end = \".png\";\n\n      if (\n        !form.picture.value.startsWith(start) ||\n        !form.picture.value.endsWith(end)\n      ) {\n        const erroMsg: string = \"L' url n'est pas valide.\";\n        const newField: Field = {\n          value: form.picture.value,\n          error: erroMsg,\n          isValid: false,\n        };\n        newForm = { ...form, ...{ picture: newField } };\n      } else {\n        const newField: Field = {\n          value: form.picture.value,\n          error: \"\",\n          isValid: true,\n        };\n        newForm = { ...form, ...{ picture: newField } };\n      }\n    }\n\n    //validator name\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = \"le nom du pokemon est requis (1-25).\";\n      const newField: Field = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false,\n      };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = {\n        value: form.name.value,\n        error: \"\",\n        isValid: true,\n      };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    //validator hp\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      //si la condition est avlider, on met a jour le state\n      const errorMsg: string =\n        \"les points de vie du pokemon sont compris entre 0 à 99.\";\n      const newField: Field = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false,\n      };\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = {\n        value: form.hp.value,\n        error: \"\",\n        isValid: true,\n      };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    //validator cp\n    if (!/^[0-9]{1,3}$/.test(form.cp.value)) {\n      const errorMsg: string =\n        \"les dégats du pokemon sont compris entre 0 à 99\";\n      const newField: Field = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false,\n      };\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = {\n        value: form.cp.value,\n        error: \"\",\n        isValid: true,\n      };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    //si le formulaire est valid on met a jour le formulaire et return un boolean true, vice versa\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  //pour la validation du champ type\n  //renvoie un boolean pour savoir si une case a cocher doit etre veroiller ou non\n  const isTypesValid = (type: string): boolean => {\n    //pour  empecher de deselectionner les deja cocher\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n\n    //impossible de cocher plus de trois cases mais peut deselectionner les deja precocher pour la modification\n    // hasType ici ne verouille pas les cases a cocher\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    }\n\n    return true;\n    //pour conclure:\n    //on ne peut cocher plus de trois cases et deselectionner la seule derniere case cochée pour ne pas avoir un pokemon sans type\n  };\n\n  const types: string[] = [\n    \"Plante\",\n    \"Feu\",\n    \"Eau\",\n    \"Insecte\",\n    \"Normal\",\n    \"Electrik\",\n    \"Poison\",\n    \"Fée\",\n    \"Vol\",\n    \"Combat\",\n    \"Psy\",\n  ];\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            {/* // l'image est only afficher si edition */}\n            {isEditForm && (\n              <div className=\"card-image\">\n                <img\n                  src={pokemon.picture}\n                  alt={pokemon.name}\n                  style={{ width: \"250px\", margin: \"0 auto\" }}\n                />\n                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                  <i onClick={deletePokemon} className=\"material-icons\">\n                    delete\n                  </i>\n                </span>\n              </div>\n            )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() && (\n                  <div className=\"form-group\">\n                    <label htmlFor=\"name\">Image</label>\n                    {/* champ prerepmplis avc l' attribut value */}\n                    <input\n                      id=\"picture\"\n                      name=\"picture\"\n                      type=\"text\"\n                      className=\"form-control\"\n                      value={form.picture.value}\n                      onChange={(e) => handleInputChange(e)}\n                    ></input>\n                    {/* error */}\n                    {form.picture.error && (\n                      <div className=\"card-panel red accent-1\">\n                        {\" \"}\n                        {form.picture.error}{\" \"}\n                      </div>\n                    )}\n                  </div>\n                )}\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  {/* champ prerepmplis avc l' attribut value */}\n                  <input\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={form.name.value}\n                    onChange={(e) => handleInputChange(e)}\n                  ></input>\n                  {/* error */}\n                  {form.name.error && (\n                    <div className=\"card-panel red accent-1\">\n                      {\" \"}\n                      {form.name.error}{\" \"}\n                    </div>\n                  )}\n                </div>\n\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input\n                    id=\"hp\"\n                    name=\"hp\"\n                    type=\"number\"\n                    className=\"form-control\"\n                    value={form.hp.value}\n                    onChange={(e) => handleInputChange(e)}\n                  ></input>\n                  {/* error */}\n                  {form.hp.error && (\n                    <div className=\"card-panel red accent-1\">\n                      {\" \"}\n                      {form.hp.error}{\" \"}\n                    </div>\n                  )}\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input\n                    id=\"cp\"\n                    name=\"cp\"\n                    type=\"number\"\n                    className=\"form-control\"\n                    value={form.cp.value}\n                    onChange={(e) => handleInputChange(e)}\n                  ></input>\n                  {/* error */}\n                  {form.cp.error && (\n                    <div className=\"card-panel red accent-1\">\n                      {\" \"}\n                      {form.cp.error}{\" \"}\n                    </div>\n                  )}\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map((type) => (\n                    <div key={type} style={{ marginBottom: \"10px\" }}>\n                      <label>\n                        <input\n                          id={type}\n                          type=\"checkbox\"\n                          value={type}\n                          checked={hasType(type)}\n                          className=\"filled-in\"\n                          onChange={(e) => selectType(type, e)}\n                          disabled={!isTypesValid(type)}\n                        ></input>\n                        {/* si le type n' est pas vallide, verrouiller la case */}\n                        <span>\n                          <p className={formatType(type)}>{type}</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">\n                  Valider\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default PokemonForm;\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Loader from \"../components/loader\";\nimport PokemonForm from \"../components/pokemon-form\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\n\ntype Params = { id: string };\n\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({\n  match,\n}) => {\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\n\n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then((pokemon) =>\n      setPokemon(pokemon)\n    );\n  }, [match.params.id]);\n\n  return (\n    <div>\n      {pokemon ? (\n        <div className=\"row\">\n          <h2 className=\"header center\">Éditer {pokemon.name}</h2>\n          <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">\n          {\" \"}\n          <Loader />{\" \"}\n        </h4>\n      )}\n    </div>\n  );\n};\n\nexport default PokemonEdit;\n","export default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date()\n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n   }","import * as React from \"react\";\nimport PokemonForm from \"../components/pokemon-form\";\nimport Pokemon from \"../models/pokemon\";\n\nconst PokemonAdd: React.FunctionComponent = () => {\n  const [id] = React.useState<number>(new Date().getTime()); // generer id unique à chaque; à chaque milliseconde on ne pourra pas ajouter deux pokemons en meme temps·\n  const [pokemon] = React.useState<Pokemon>(new Pokemon(id));\n\n  return (\n    <div className=\"row\">\n      <h2 className=\"header center\">Ajouter un pokémon</h2>\n      <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\n    </div>\n  );\n};\n\nexport default PokemonAdd;\n","class AuthentificationService {\n  static isAuthentificated: boolean = false; //au demarrage l'user n'est pas connecté\n\n  static login(username: string, password: string): Promise<boolean> {\n    const isAuthentificated = username === \"pikachu\" && password === \"pikachu\";\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.isAuthentificated = isAuthentificated;\n        resolve(isAuthentificated);\n      }, 1000);\n    });\n  }\n}\n\nexport default AuthentificationService;\n","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/authentification-service';\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  username: Field,\n  password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n  const history = useHistory();\n\n  //creation d'un etat de user\n  const [form, setForm] = useState<Form>({\n    username: { value: '' },\n    password: { value: '' },\n  });\n\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n \n  const validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator username\n    if(form.username.value.length < 3) { \n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ username: newField } };\n    } else {\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ username: newField } };\n    }\n\n    // Validator password\n    if(form.password.value.length < 6) {\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ password: newField } };\n    } else {\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ password: newField } };\n    }\n\n    setForm(newForm);\n\n    return newForm.username.isValid && newForm.password.isValid;\n  }\n   //soumission du formulaire\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      setMessage('👉 Tentative de connexion en cours ...'); //afficher msg authentification en cours //pour le delay\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n        if(!isAuthenticated) { //si l'authnetification est incorrecte\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');//afficher\n          return;\n        }\n        \n        history.push('/pokemons'); //si auth correcte, on le dirige vers la liste des pokemons\n        \n      });\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Form message */}\n                {/* affirme l'user traitement en cours... */}\n                {message && <div className=\"form-group\"> \n                  <div className=\"card-panel grey lighten-5\">\n                    {message}\n                  </div>\n                </div>}\n                {/* Field username */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Identifiant</label>\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.username.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.username.error} \n                  </div>} \n                </div>\n                {/* Field password */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Mot de passe</label>\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.password.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.password.error} \n                  </div>} \n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthentificationService from '../services/authentification-service';\n\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n  <Route {...rest} render={(props) => {\n    const isAuthenticated = AuthentificationService.isAuthentificated; //regarde si il y a un user connecté\n    if (!isAuthenticated) {    \n      return <Redirect to={{ pathname: '/login' }} /> //rediriger vers la page login si non connecté\n    }\n  \n    return <Component {...props} /> //sinon rediriger vers la page demandées\n  }} />\n);\n  \nexport default PrivateRoute;","import React, { FunctionComponent } from \"react\";\nimport PokemonList from \"./pages/pokemon-list\";\nimport PokemonsDetail from \"./pages/pokemon-detail\";\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PageNotFound from \"./pages/pageNotFound\";\nimport PokemonEdit from \"./pages/pokemon-edit\";\nimport PokemonAdd from \"./pages/pokemon-add\";\nimport Login from \"./pages/login\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nconst App: FunctionComponent = () => {\n  //composant ecrit sous forme de fonction\n\n  return (\n    <Router>\n      <div>\n        {/* barre de navigation commun a tous les composants */}\n        <nav>\n          <div className=\"nav-wrapper teal\">\n            <Link to=\"/\" className=\"brand-logo center\">\n              Pokedex\n            </Link>\n          </div>\n        </nav>\n        {/* le systeme de gestion des routes de notre application */}\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={PokemonList} />\n          <Route exact path=\"/login\" component={Login} />\n          <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\n          <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd} />\n          <PrivateRoute path=\"/pokemons/edit/:id\" component={PokemonEdit} />\n          <PrivateRoute path=\"/pokemons/:id\" component={PokemonsDetail} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\n\nReactDom.render(\n    <App/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}